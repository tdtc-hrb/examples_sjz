<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Obj\USBHostLite.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Obj\USBHostLite.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT4.0 [Build 728]: Last Updated: Thu May 13 11:17:38 2010
<BR><P>
<H3>Maximum Stack Usage =        328 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
_printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d921ac]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d92080]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d92080]">NMI_Handler</a><BR>
 <LI><a href="#[d92044]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d92044]">HardFault_Handler</a><BR>
 <LI><a href="#[d92008]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d92008]">MemManage_Handler</a><BR>
 <LI><a href="#[d91fcc]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d91fcc]">BusFault_Handler</a><BR>
 <LI><a href="#[d91f90]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d91f90]">UsageFault_Handler</a><BR>
 <LI><a href="#[d91f54]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d91f54]">SVC_Handler</a><BR>
 <LI><a href="#[d91f18]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d91f18]">DebugMon_Handler</a><BR>
 <LI><a href="#[d91edc]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d91edc]">PendSV_Handler</a><BR>
 <LI><a href="#[d91ea0]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d91ea0]">SysTick_Handler</a><BR>
 <LI><a href="#[d91e64]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d91e64]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d920bc]">Reset_Handler</a>
 <LI><a href="#[d92080]">NMI_Handler</a>
 <LI><a href="#[d92044]">HardFault_Handler</a>
 <LI><a href="#[d92008]">MemManage_Handler</a>
 <LI><a href="#[d91fcc]">BusFault_Handler</a>
 <LI><a href="#[d91f90]">UsageFault_Handler</a>
 <LI><a href="#[d91f54]">SVC_Handler</a>
 <LI><a href="#[d91f18]">DebugMon_Handler</a>
 <LI><a href="#[d91edc]">PendSV_Handler</a>
 <LI><a href="#[d91ea0]">SysTick_Handler</a>
 <LI><a href="#[d9166c]">WDT_IRQHandler</a>
 <LI><a href="#[d918c4]">TIMER0_IRQHandler</a>
 <LI><a href="#[d91888]">TIMER1_IRQHandler</a>
 <LI><a href="#[d9184c]">TIMER2_IRQHandler</a>
 <LI><a href="#[d91810]">TIMER3_IRQHandler</a>
 <LI><a href="#[d917d4]">UART0_IRQHandler</a>
 <LI><a href="#[d91798]">UART1_IRQHandler</a>
 <LI><a href="#[d9175c]">UART2_IRQHandler</a>
 <LI><a href="#[d91720]">UART3_IRQHandler</a>
 <LI><a href="#[d91a68]">PWM1_IRQHandler</a>
 <LI><a href="#[d91c0c]">I2C0_IRQHandler</a>
 <LI><a href="#[d91bd0]">I2C1_IRQHandler</a>
 <LI><a href="#[d91b94]">I2C2_IRQHandler</a>
 <LI><a href="#[d91978]">SPI_IRQHandler</a>
 <LI><a href="#[d9193c]">SSP0_IRQHandler</a>
 <LI><a href="#[d91900]">SSP1_IRQHandler</a>
 <LI><a href="#[d91ae0]">PLL0_IRQHandler</a>
 <LI><a href="#[d919b4]">RTC_IRQHandler</a>
 <LI><a href="#[d91d38]">EINT0_IRQHandler</a>
 <LI><a href="#[d91cfc]">EINT1_IRQHandler</a>
 <LI><a href="#[d91cc0]">EINT2_IRQHandler</a>
 <LI><a href="#[d91c84]">EINT3_IRQHandler</a>
 <LI><a href="#[d91e64]">ADC_IRQHandler</a>
 <LI><a href="#[d91e28]">BOD_IRQHandler</a>
 <LI><a href="#[d92bc0]">USB_IRQHandler</a>
 <LI><a href="#[d91db0]">CAN_IRQHandler</a>
 <LI><a href="#[d91d74]">DMA_IRQHandler</a>
 <LI><a href="#[d91b58]">I2S_IRQHandler</a>
 <LI><a href="#[d91c48]">ENET_IRQHandler</a>
 <LI><a href="#[d919f0]">RIT_IRQHandler</a>
 <LI><a href="#[d91b1c]">MCPWM_IRQHandler</a>
 <LI><a href="#[d91a2c]">QEI_IRQHandler</a>
 <LI><a href="#[d91aa4]">PLL1_IRQHandler</a>
 <LI><a href="#[d916e4]">USBActivity_IRQHandler</a>
 <LI><a href="#[d91dec]">CANActivity_IRQHandler</a>
 <LI><a href="#[d8fc2c]">_sputc</a>
 <LI><a href="#[d907e4]">__main</a>
 <LI><a href="#[d8fd94]">_printf_input_char</a>
 <LI><a href="#[d89098]">_get_lc_ctype</a>
 <LI><a href="#[145a08c]">__I$use$semihosting</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d907e4]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[d906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1457b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1457b48]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[d907e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1457b0c]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d906b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1457ad0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1457a94]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14578f0]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14578f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[14578f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[d8da6c]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[d8fe84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[d8d1c0]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8dd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[d8d8c8]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[d8d4cc]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8c824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d8d418]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8c824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d8d364]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8c824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d8d2b0]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[d8ceb4]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[d8d6e8]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8ffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8d634]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8ffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8d580]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8ffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8d7d8]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d8d9b8]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d8d0d0]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d8d01c]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d8cf68]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d8cb6c]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[d8ca7c]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[d8ce00]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[d8dc4c]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d8db5c]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[d8cd4c]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d8cc5c]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[d8b708]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[d89d40]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[145b0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8c4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[d88468]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[d8833c]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000B))
<BR><BR>[Calls]<UL><LI><a href="#[d8b000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[d88378]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[d883f0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[d882c4]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))

<P><STRONG><a name="[d88288]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[d89098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[d8824c]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[d881d4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[d88198]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[145b694]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[145b70c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000028))

<P><STRONG><a name="[d8806c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[145b964]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[145b5a4]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[145b61c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[145b9dc]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[145b8ec]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[d8815c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[d880e4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[145b568]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002F))

<P><STRONG><a name="[145ba54]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[145b874]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[145a3d4]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[145ae60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1459768]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1459588]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[145954c]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14596b4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[145981c]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[145963c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[d906b8]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d907e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1457b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[d8c554]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[d8c1d0]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d8c4a0]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_li &rArr; __rt_lib_init &rArr; _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d89d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[d8c4dc]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[d8c3ec]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Main_Copy &rArr; FILE_Write &rArr; FAT_ClusWrite &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8c428]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[d8932c]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[d8a13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[145ae60]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[145a3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[145ae9c]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[145ae24]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[145a8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[d95014]"></a>UART_Init</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, usbhost_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d94fd8]"></a>UART_PrintChar</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhost_uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d94f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintStr
</UL>

<P><STRONG><a name="[d94f9c]"></a>UART_PrintStr</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, usbhost_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UART_PrintStr
</UL>
<BR>[Calls]<UL><LI><a href="#[d94fd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[d94f60]"></a>UART_Printf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, usbhost_uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = UART_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d913d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[d94f9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_PrintStr
</UL>
<BR>[Called By]<UL><LI><a href="#[d92530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[d9256c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
<LI><a href="#[d925e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Copy
<LI><a href="#[d92ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[d92bc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
<LI><a href="#[d92bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[d937f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[d9382c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
<LI><a href="#[d94600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[d913d8]"></a>__c89vsprintf</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8fc2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d8fd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[d9094c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d90910]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d908d4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[145a08c]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sys_exit.o(.text)
</UL>
<P><STRONG><a name="[145a050]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[d95d34]"></a>SystemInit</STRONG> (Thumb, 532 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9463c]"></a>FAT_GetFATType</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbhost_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d94600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[d94600]"></a>FAT_Init</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = FAT_Init &rArr; UART_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d94024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE32U
<LI><a href="#[d94060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[d9463c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFATType
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d945c4]"></a>FAT_PutSFN</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FAT_PutSFN &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d943e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
</UL>

<P><STRONG><a name="[d94588]"></a>FAT_ChkEntType</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbhost_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[d9454c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeEntry
</UL>

<P><STRONG><a name="[d9454c]"></a>FAT_GetFreeEntry</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FAT_GetFreeEntry &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[d94588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ChkEntType
</UL>
<BR>[Called By]<UL><LI><a href="#[d943e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
</UL>

<P><STRONG><a name="[d94510]"></a>FAT_StrCaseCmp</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usbhost_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
</UL>

<P><STRONG><a name="[d944d4]"></a>FAT_GetSfnExt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, usbhost_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9445c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSFN
</UL>

<P><STRONG><a name="[d94498]"></a>FAT_GetSfnName</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbhost_fat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d9445c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSFN
</UL>

<P><STRONG><a name="[d9445c]"></a>FAT_GetSFN</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FAT_GetSFN
</UL>
<BR>[Calls]<UL><LI><a href="#[d94498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSfnName
<LI><a href="#[d944d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSfnExt
</UL>
<BR>[Called By]<UL><LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
</UL>

<P><STRONG><a name="[d94420]"></a>FAT_FindEntry</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FAT_FindEntry &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d94024]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE32U
<LI><a href="#[d94060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[d9445c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetSFN
<LI><a href="#[d94510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_StrCaseCmp
<LI><a href="#[d94588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ChkEntType
</UL>
<BR>[Called By]<UL><LI><a href="#[d943a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[d943e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
</UL>

<P><STRONG><a name="[d943e4]"></a>FAT_CreateEntry</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FAT_CreateEntry &rArr; FAT_FindEntry &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[d9454c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeEntry
<LI><a href="#[d945c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PutSFN
</UL>
<BR>[Called By]<UL><LI><a href="#[d943a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
</UL>

<P><STRONG><a name="[d943a8]"></a>FILE_Open</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = FILE_Open &rArr; FAT_CreateEntry &rArr; FAT_FindEntry &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d943e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_CreateEntry
<LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[d92530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[d9256c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
<LI><a href="#[d925e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Copy
</UL>

<P><STRONG><a name="[d9436c]"></a>FAT_ClusRead</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = FAT_ClusRead &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d942f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
</UL>

<P><STRONG><a name="[d94330]"></a>FAT_GetNextClus</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FAT_GetNextClus &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d94060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d94204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEndClus
<LI><a href="#[d942f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
</UL>

<P><STRONG><a name="[d942f4]"></a>FILE_Read</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FILE_Read &rArr; FAT_ClusRead &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d94330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
<LI><a href="#[d9436c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusRead
</UL>
<BR>[Called By]<UL><LI><a href="#[d92530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[d9256c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
<LI><a href="#[d925e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Copy
</UL>

<P><STRONG><a name="[d942b8]"></a>FAT_UpdateFAT</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FAT_UpdateFAT &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
<LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[d9427c]"></a>FAT_GetFreeClus</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FAT_GetFreeClus &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d94060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[d94240]"></a>FAT_ClusWrite</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = FAT_ClusWrite &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[d94204]"></a>FAT_GetEndClus</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FAT_GetEndClus &rArr; FAT_GetNextClus &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d94330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
</UL>
<BR>[Called By]<UL><LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
</UL>

<P><STRONG><a name="[d941c8]"></a>FILE_Write</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FILE_Write &rArr; FAT_ClusWrite &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
<LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
<LI><a href="#[d94204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetEndClus
<LI><a href="#[d94240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusWrite
<LI><a href="#[d9427c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeClus
<LI><a href="#[d942b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
</UL>
<BR>[Called By]<UL><LI><a href="#[d92530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[d925e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Copy
</UL>

<P><STRONG><a name="[d9418c]"></a>FAT_UpdateEntry</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, usbhost_fat.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d93fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[d94150]"></a>FILE_Close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbhost_fat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = FILE_Close &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
<LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d92530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Write
<LI><a href="#[d9256c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Read
<LI><a href="#[d925e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Copy
</UL>

<P><STRONG><a name="[d93994]"></a>Fill_MSCommand</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE32U
<LI><a href="#[d9364c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteBE16U
<LI><a href="#[d93fac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[d938a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[d938e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[d9391c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[d93958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[d93958]"></a>MS_Inquire</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_Inquire &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d9382c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[d9391c]"></a>MS_ReadCapacity</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MS_ReadCapacity &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d936c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadBE32U
<LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d9382c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[d938e0]"></a>MS_GetSenseInfo</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_GetSenseInfo &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d9382c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[d938a4]"></a>MS_TestUnitReady</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MS_TestUnitReady &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d9382c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[d93868]"></a>MS_GetMaxLUN</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_GetMaxLUN &rArr; Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[d9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[d9382c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
</UL>

<P><STRONG><a name="[d9382c]"></a>MS_Init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MS_Init &rArr; UART_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d93868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
<LI><a href="#[d938a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[d938e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[d9391c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[d93958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d937f0]"></a>MS_ParseConfiguration</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MS_ParseConfiguration &rArr; UART_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d94060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d92ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[d940d8]"></a>MS_BulkRecv</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d94150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[d9418c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateEntry
<LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[d94240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusWrite
<LI><a href="#[d9427c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeClus
<LI><a href="#[d942b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
<LI><a href="#[d94330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
<LI><a href="#[d9436c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusRead
<LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[d9454c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeEntry
<LI><a href="#[d945c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PutSFN
<LI><a href="#[d94600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[d9409c]"></a>MS_BulkSend</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, usbhost_ms.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MS_BulkSend &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
<LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[d94150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[d9418c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateEntry
<LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[d94240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_ClusWrite
<LI><a href="#[d942b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
<LI><a href="#[d945c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_PutSFN
</UL>

<P><STRONG><a name="[d92d28]"></a>Host_DelayUS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d92cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
</UL>

<P><STRONG><a name="[d92cec]"></a>Host_DelayMS</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_DelayMS
</UL>
<BR>[Calls]<UL><LI><a href="#[d92d28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[d92ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[d92bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[d92cb0]"></a>Host_HCCAInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d92bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[d92c74]"></a>Host_TDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d92bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[d92c38]"></a>Host_EDInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d92bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
</UL>

<P><STRONG><a name="[d92bfc]"></a>Host_Init</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = Host_Init &rArr; UART_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d92c38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EDInit
<LI><a href="#[d92c74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_TDInit
<LI><a href="#[d92cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_HCCAInit
<LI><a href="#[d92cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d92bc0]"></a>USB_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = USB_IRQHandler &rArr; UART_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d92b84]"></a>Host_WDHWait</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>

<P><STRONG><a name="[d93700]"></a>Host_ProcessTD</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Host_ProcessTD
</UL>
<BR>[Calls]<UL><LI><a href="#[d92b84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_WDHWait
</UL>
<BR>[Called By]<UL><LI><a href="#[d92b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[d9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[d938a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_TestUnitReady
<LI><a href="#[d938e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetSenseInfo
<LI><a href="#[d9391c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
<LI><a href="#[d93958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Inquire
<LI><a href="#[d9409c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkSend
<LI><a href="#[d940d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_BulkRecv
</UL>

<P><STRONG><a name="[d93fe8]"></a>WriteLE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[d92b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
<LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[d942b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateFAT
</UL>

<P><STRONG><a name="[d92b48]"></a>Host_FillSetup</STRONG> (Thumb, 92 bytes, Stack size 28 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[d93fe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[d92b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[d9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
</UL>

<P><STRONG><a name="[d92b0c]"></a>Host_CtrlSend</STRONG> (Thumb, 112 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlSend &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[d92b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
<LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[d92ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
</UL>

<P><STRONG><a name="[d94060]"></a>ReadLE16U</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadLE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[d92ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[d937f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[d9427c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetFreeClus
<LI><a href="#[d94330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_GetNextClus
<LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[d94600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[d9373c]"></a>Host_CtrlRecv</STRONG> (Thumb, 112 bytes, Stack size 36 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Host_CtrlRecv &rArr; Host_FillSetup &rArr; WriteLE16U
</UL>
<BR>[Calls]<UL><LI><a href="#[d92b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_FillSetup
<LI><a href="#[d93700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_ProcessTD
</UL>
<BR>[Called By]<UL><LI><a href="#[d92ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[d93868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_GetMaxLUN
</UL>

<P><STRONG><a name="[d92ad0]"></a>Host_EnumDev</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Host_EnumDev &rArr; MS_ParseConfiguration &rArr; UART_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d92b0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlSend
<LI><a href="#[d92cec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_DelayMS
<LI><a href="#[d9373c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_CtrlRecv
<LI><a href="#[d937f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ParseConfiguration
<LI><a href="#[d94060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadLE16U
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d94024]"></a>ReadLE32U</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadLE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[d94420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_FindEntry
<LI><a href="#[d94600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
</UL>

<P><STRONG><a name="[d93fac]"></a>WriteLE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteLE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
<LI><a href="#[d94150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[d9418c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_UpdateEntry
</UL>

<P><STRONG><a name="[d936c4]"></a>ReadBE32U</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReadBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[d9391c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_ReadCapacity
</UL>

<P><STRONG><a name="[d93610]"></a>WriteBE32U</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE32U
</UL>
<BR>[Called By]<UL><LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[d92a94]"></a>ReadBE16U</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbhost_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[d9364c]"></a>WriteBE16U</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, usbhost_lpc17xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WriteBE16U
</UL>
<BR>[Called By]<UL><LI><a href="#[d93994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fill_MSCommand
</UL>

<P><STRONG><a name="[d925e4]"></a>Main_Copy</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbhost_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = Main_Copy &rArr; FILE_Write &rArr; FAT_ClusWrite &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d94150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[d942f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
<LI><a href="#[d943a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d925a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d925a8]"></a>main</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, usbhost_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = main &rArr; Main_Copy &rArr; FILE_Write &rArr; FAT_ClusWrite &rArr; MS_BulkRecv &rArr; Fill_MSCommand &rArr; WriteBE32U
</UL>
<BR>[Calls]<UL><LI><a href="#[d925e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Main_Copy
<LI><a href="#[d92ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_EnumDev
<LI><a href="#[d92bfc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Init
<LI><a href="#[d9382c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Init
<LI><a href="#[d94600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FAT_Init
<LI><a href="#[d95014]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d95d34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8c3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d9256c]"></a>Main_Read</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usbhost_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d94150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[d942f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
<LI><a href="#[d943a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[d92530]"></a>Main_Write</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, usbhost_main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d94150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Close
<LI><a href="#[d941c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Write
<LI><a href="#[d942f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Read
<LI><a href="#[d943a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FILE_Open
<LI><a href="#[d94f60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Printf
</UL>

<P><STRONG><a name="[d920bc]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d92080]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d92080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d92080]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d92044]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d92044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d92044]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d92008]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d92008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d92008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91fcc]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d91fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d91fcc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91f90]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d91f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d91f90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91f54]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d91f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d91f54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91f18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d91f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d91f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91edc]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d91edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d91edc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91ea0]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d91ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d91ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91e64]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d91e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d91e64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91e28]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91dec]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91db0]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91d74]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91d38]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91cfc]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91cc0]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91c84]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91c48]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91c0c]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91bd0]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91b94]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91b58]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91b1c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91ae0]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91aa4]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91a68]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91a2c]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d919f0]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d919b4]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91978]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d9193c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91900]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d918c4]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91888]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d9184c]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91810]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d917d4]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91798]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d9175c]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d91720]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d916e4]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d9166c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[d921ac]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8b3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d90370]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8aed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d8bfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8fac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d90118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d90334]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8aed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d8bfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8fac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d90118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d90244]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8ffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d90208]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8e5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[d8f524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[d8ffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d90118]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d90334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d90370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d8ffec]"></a>_printf_int_dec</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[d8bfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d90208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[d90244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d8d634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[d8d6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[d8fe84]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8da6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[d8fd58]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 72 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8dd00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d913d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[d8fc2c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d913d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[d8fac4]"></a>_printf_wctomb</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[d90334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d90370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8b870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[d8f95c]"></a>_printf_longlong_dec</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8bfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[d8c0a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d8cf68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[d8d01c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[d8d0d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[d8f560]"></a>_printf_longlong_oct</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8bfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8f4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[d8f524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[d8f524]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d90208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[d8f4e8]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8f560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[d8cb6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[d8e624]"></a>_printf_longlong_hex</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8bfb4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[d8e5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[d8e5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[d8e5e8]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d90208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[d8e5ac]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d8ca7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[d8e570]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8e624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[d8dd00]"></a>__printf</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8d1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[d8fd58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[d8c0a4]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d8bec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d8f95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[d8bfb4]"></a>_printf_int_common</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d90334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d90370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8e624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[d8f560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[d8f95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[d8ffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8be88]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[d8be4c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 626 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d895fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d8aed4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d8b000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[d8b4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[d8bec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d90334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d90370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8c824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d8ba14]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d90118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[d8b99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d8b9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d8b9d8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8dc4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[d8b99c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d8ba14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8db5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[d8b870]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8fac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d8b7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[d8b834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[d8b834]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8cd4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[d8b7f8]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8cc5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[d8b618]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[d8fac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[d8b4ec]"></a>__rt_udiv10</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[d8ffec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8b3fc]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d8941c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[d921ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[d8c1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d8b294]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8b000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[d8b618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[d8b000]"></a>__rt_locale</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8833c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[d8b294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d8aed4]"></a>_printf_fp_infnan</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d90334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d90370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d8ad30]"></a>_btod_etento</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d8a628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[d8bec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8a13c]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d8932c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8c3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d89458]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d8941c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8b3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d893e0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d88f30]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d89098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[d8a2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[145ab18]"></a>__rt_fp_status_addr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145b0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[145a8c0]"></a>_sys_exit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145ae24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[d8a790]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[d8a718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[d8bec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8a754]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[d8a718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[d8a718]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[d8a754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[d8a790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[d8a6dc]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8a628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d8a664]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d8a5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d8a628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d8a628]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[d8a6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8ad30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d8bec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8a5b0]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[d8a664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d8ad30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d8bec4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8a538]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d8a5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[d895fc]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[d8a2a4]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[d88f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d88198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[d89098]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[d88f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d88288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[145b0b8]"></a>_fp_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[145ab18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d89d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[145b07c]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[d8c824]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d8d364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[d8d418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[d8d4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[d896ec]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, usenofp.o(x$fpl$usenofp), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d8fd94]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[d8bec4]"></a>_fp_digits</STRONG> (Thumb, 492 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d8a5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d8a628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[d8a790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[d8ad30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d8c0a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d8be4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
